#!/usr/bin/env node
var fs = require('fs-extra');
var path = require('path');
var progressBar = require('progress');
var chalk = require('chalk');
var inquirer = require('inquirer');
var program = require('commander');
var NodeGit = require('nodegit');

var package = require('../package.json');

var rightSpacePad = function (str, length) {
    while (str.length < length) {
        str += ' ';
    }
    return str;
};

var checkZgitDir = function (gitPath) {
    var CONFIG_FILE_MAP = {};
    var zgitConfigBranchFilePath = path.resolve(gitPath, '.zgit/branches.json');
    CONFIG_FILE_MAP['branches'] = zgitConfigBranchFilePath;
    try {
        fs.statSync(zgitConfigBranchFilePath);
    }
    catch (e) {
        fs.ensureFileSync(zgitConfigBranchFilePath);
    }
    return CONFIG_FILE_MAP;
};

//this will be object of repo
function aliasBranchName(aliasname) {
    var repo = this;
    var gitPath = repo.path();
    var zgitConfigs = checkZgitDir(gitPath);
    var branchesConfigPath = zgitConfigs['branches'];
    var branches = JSON.parse(fs.readFileSync(branchesConfigPath, 'utf8') || '{}');
    repo.getCurrentBranch().then(function (reference) {
        var localBranch = reference.name();//get refs name
        branches[localBranch] = aliasname;//make link map  local branch --> custom alias branch name
        fs.writeFileSync(branchesConfigPath, JSON.stringify(branches))
    });
}

//this will be object of repo
function listBranchName() {
    var repo = this;
    var gitPath = repo.path();
    var zgitConfigs = checkZgitDir(gitPath);
    var branchesConfigPath = zgitConfigs['branches'];
    var branches = JSON.parse(fs.readFileSync(branchesConfigPath, 'utf8') || '{}');
    var branches_keys = Object.keys(branches);

    repo.getCurrentBranch().then(function (reference) {
        var localBranch = reference.name();//get refs name
        repo.getReferences(NodeGit.Reference.TYPE.LISTALL).then(function (refs) {
            refs.forEach(function (ref) {
                var ref_name = ref.name();
                var names = ref_name.split('/');
                var headsBranchIndex = 2;
                if (names[1] == 'heads') {
                    if (branches_keys.indexOf(ref_name) > -1) {
                        console.log(localBranch == ref ? ' ∗' : '  ', chalk.green(names[headsBranchIndex]), chalk.yellow('('), chalk.yellow(branches[ref_name]), chalk.yellow(')'));
                    }
                    else {
                        console.log(localBranch == ref ? ' ∗' : '  ', chalk.green(names[headsBranchIndex]));
                    }
                }
            });
        });
    });
}

//this will be object of repo
function ckeckoutBranchName(rawArgv) {
    var repo = this;
    var gitPath = repo.path();
    var zgitConfigs = checkZgitDir(gitPath);
    var branchesConfigPath = zgitConfigs['branches'];
    var branches = JSON.parse(fs.readFileSync(branchesConfigPath, 'utf8') || '{}');
    var branches_keys = Object.keys(branches);
    var argv = rawArgv.slice(1);

    repo.getCurrentBranch().then(function (reference) {
        var localBranch = reference.name();//get refs name
        //default to list local branch
        if (!argv || !argv.length) {
            repo.getReferences(NodeGit.Reference.TYPE.LISTALL).then(function (refs) {
                var choices = [];
                var choicesRefs = [];
                refs.forEach(function (ref) {
                    var ref_name = ref.name();
                    var names = ref_name.split('/');
                    var headsBranchIndex = 2;
                    if (names[1] == 'heads') {
                        if (branches_keys.indexOf(ref_name) > -1) {
                            choices.push(chalk.green(names[headsBranchIndex]) + chalk.yellow(' ( ') + chalk.yellow(branches[ref_name]) + chalk.yellow(' ) '));
                            choicesRefs.push(ref_name);
                        }
                        else {
                            choices.push(chalk.green(names[headsBranchIndex]));
                            choicesRefs.push(ref_name);
                        }
                    }
                });

                var defaultChoices = choicesRefs.indexOf(localBranch);

                inquirer
                    .prompt([
                        {
                            type   : 'list',
                            name   : 'checkout_local_branch_select',
                            message: '请选择需要切换的分支',
                            choices: choices,
                            default: defaultChoices
                        },
                        {
                            type   : 'input',
                            name   : 'checkout_local_branch_alias',
                            message: '请输入分支的别名'
                        }
                    ])
                    .then(function (result) {
                        var ref = choicesRefs[choices.indexOf(result['checkout_local_branch_select'])];
                        //var alias = result['checkout_local_branch_alias'].replace(/^\s*|\s+$/g, '');
                        var alias = result['checkout_local_branch_alias'].trim();
                        repo.checkoutBranch(ref, new NodeGit.CheckoutOptions())
                            .then(function () {
                                if (alias) {
                                    branches[ref] = alias;
                                    fs.writeFileSync(branchesConfigPath, JSON.stringify(branches));
                                }
                            }, function (err) {
                                console.error(arguments);
                            });
                    });
            });
        }
    });
}

program.version(package.version);

program
    .command('checkout')
    .description('检出一个远程分支，并且对它进行重命名，但是并不是修改分支名称，zgit仅仅做了分支别名的一个映射')
    .option('-r,--remote <remotebranch>', '检出一个远程分支')
    .option('-l,--local <localbranch>', '检出一个远程分支')
    .action(function cmd_checkout() {
        var cwd = process.cwd();
        var rawArgv = program['rawArgs'].slice(2);
        var repoPath = path.resolve(cwd);
        NodeGit.Repository
               .open(repoPath)
               .then(function success(repo) {
                   ckeckoutBranchName.call(repo, rawArgv);
               }, function fail(reasonForFailure) {
                   console.error('ERROR: ', reasonForFailure.message);
               });
    });

program
    .command('alias <aliasName>')
    .description('设置或者修改当前分支的别名，但是并不是修改分支名称，zgit仅仅做了分支别名的一个映射')
    .action(function cmd_alias(aliasName) {
        var cwd = process.cwd();
        //var rawArgv = program['rawArgs'].slice(2);
        var repoPath = path.resolve(cwd);
        NodeGit.Repository
               .open(repoPath)
               .then(function success(repo) {
                   aliasBranchName.call(repo, aliasName);
               }, function fail(reasonForFailure) {
                   console.error('ERROR: ', reasonForFailure.message);
               });
    });

program
    .command('branch')
    .description('查看当前项目的所有别名和改别名对应的本地分支名和远程分支名，但是并不是修改分支名称，zgit仅仅做了分支别名的一个映射')
    .action(function cmd_list() {
        var cwd = process.cwd();
        var repoPath = path.resolve(cwd);

        NodeGit.Repository
               .open(repoPath)
               .then(function success(repo) {
                   listBranchName.call(repo)
               }, function fail(reasonForFailure) {
                   console.error('ERROR: ', reasonForFailure.message);
               });
    });

program.parse(process.argv);